#!/usr/bin/env bash

# Use Cadius to create disk images for distribution
# https://github.com/mach-kernel/cadius

set -e
source "bin/util.sh"

if ! command -v "cadius" >/dev/null; then
    cecho red "Cadius not installed."
    exit 1
fi

tempdir=$(mktemp -d "${TMPDIR:-/tmp}/pkg.XXXXXXXXX")
test -d "${tempdir}" || (cecho red "cannot make tempdir"; exit 1)

# ============================================================
# Extract metadata for the build

vmajor=$(grep 'kDeskTopVersionMajor =' config.inc | sed -e 's/.* = //')
vminor=$(grep 'kDeskTopVersionMinor =' config.inc | sed -e 's/.* = //')
vsuffix=$(grep 'define kDeskTopVersionSuffix' config.inc | cut -d'"' -f2)
lang=$(grep 'define kBuildLang' config.inc | cut -d'"' -f2)
version=$(echo ${vmajor}.${vminor}${vsuffix}-${lang})

# ============================================================
# Define and create the disk images

cecho yellow "Building disk images: $version"

# One 800k image (complete), and two 140k images (two parts).

mkdir -p out
IMGFILE_COMPLETE_2MG="out/A2DeskTop-${version}_800k.2mg"
IMGFILE_COMPLETE_HDV="out/A2DeskTop-${version}_800k.hdv"
IMGFILE_PART1="out/A2DeskTop-${version}_140k_disk1.po"
IMGFILE_PART2="out/A2DeskTop-${version}_140k_disk2.po"

VOLNAME_COMPLETE="A2.DeskTop"
VOLNAME_PART1="A2.DeskTop.1"
VOLNAME_PART2="A2.DeskTop.2"

IMAGES="$IMGFILE_COMPLETE_2MG $IMGFILE_COMPLETE_HDV $IMGFILE_PART1 $IMGFILE_PART2"

# Create disk images.

for img in $IMAGES; do
    rm -f "$img"
done

suppress cadius CREATEVOLUME $IMGFILE_COMPLETE_2MG $VOLNAME_COMPLETE 800KB --quiet --no-case-bits
suppress cadius CREATEVOLUME $IMGFILE_COMPLETE_HDV $VOLNAME_COMPLETE 800KB --quiet --no-case-bits
suppress cadius CREATEVOLUME $IMGFILE_PART1 $VOLNAME_PART1 140KB --quiet --no-case-bits
suppress cadius CREATEVOLUME $IMGFILE_PART2 $VOLNAME_PART2 140KB --quiet --no-case-bits

# ============================================================
# Implementations for manifest operations

add_file () {
    # Add the files into the disk images.
    # Usage: add_file_internal IMGFILE SRCFILE DSTFOLDER DSTFILE TYPESUFFIX
    add_file_internal () {
        local img_file="$1"
        local src_file="$2"
        local folder="$3"
        local dst_file="$4"
        local suffix="$5"

        local tmp_file="$tempdir/$dst_file#$suffix"
        cp "$src_file" "$tmp_file"

        if [ "$suffix" = "040000" ]; then
            perl -p -i -e 's/\r?\n/\r/g' "$tmp_file" # Ensure Apple line endings
        fi

        suppress cadius ADDFILE "$img_file" "$folder" "$tmp_file" --quiet --no-case-bits
        rm "$tmp_file"
    }

    local disposition="$1"
    local src_file="$2"
    local folder="$3"
    local dst_file="$4"
    local suffix="$5"

    add_file_internal $IMGFILE_COMPLETE_2MG "$src_file" "/$VOLNAME_COMPLETE/$folder" "$dst_file" "$suffix"
    add_file_internal $IMGFILE_COMPLETE_HDV "$src_file" "/$VOLNAME_COMPLETE/$folder" "$dst_file" "$suffix"
    if [ "$disposition" = "required" ]; then
        add_file_internal $IMGFILE_PART1 "$src_file" "/$VOLNAME_PART1/$folder" "$dst_file" "$suffix"
    else
        add_file_internal $IMGFILE_PART2 "$src_file" "/$VOLNAME_PART2/$folder" "$dst_file" "$suffix"
    fi
}

create_folder() {
    # Create a folder in the volume
    # Usage: create_folder_internal IMGFILE PATH
    create_folder_internal () {
        local img_file="$1"
        local path="$2"
        suppress cadius CREATEFOLDER "$img_file" "$path" --quiet --no-case-bits
    }

    local disposition="$1"
    local path="$2"

    create_folder_internal $IMGFILE_COMPLETE_2MG "/$VOLNAME_COMPLETE/$path"
    create_folder_internal $IMGFILE_COMPLETE_HDV "/$VOLNAME_COMPLETE/$path"
    if [ "$disposition" = "required" ]; then
        create_folder_internal $IMGFILE_PART1 "/$VOLNAME_PART1/$path"
    else
        create_folder_internal $IMGFILE_PART2 "/$VOLNAME_PART2/$path"
    fi
}

# ============================================================
# Populate the images with files and directories

manifest="$(bin/manifest $@)"
eval "$manifest"

# ============================================================
# Verify and clean up

for img in $IMAGES; do
    ls -1 "$img"
    cadius CATALOG "$img" | tail -1
done

cecho yellow "Building package: $version"

ZIPFILE="out/A2DeskTop-${version}.zip"
rm -f "$ZIPFILE"
zip --junk-paths "$ZIPFILE" $IMAGES res/README.txt
unzip -l "$ZIPFILE"

rmdir "$tempdir"
